from numpy import float64
from numpy.typing import NDArray


def normalize_vector(xyz: NDArray[float64]) -> NDArray[float64]: ...


def normalize_vectors(xyz: NDArray[float64]) -> NDArray[float64]: ...


def cross_vector(a: NDArray[float64], b: NDArray[float64]) -> NDArray[float64]: ...


def cross_vectors(a: NDArray[float64], b: NDArray[float64]) -> NDArray[float64]: ...


class VectorPoint:
    def __init__(self, xyz: NDArray[float64]): ...

    @classmethod
    def from_lonlat(
        cls, coordinates: NDArray[float64], degrees: bool = True
    ) -> VectorPoint: ...

    @property
    def xyz(self) -> NDArray[float64]: ...

    def to_lonlat(self, degrees: bool = True) -> NDArray[float64]: ...

    def to_multi(self) -> MultiVectorPoint: ...

    @property
    def length(self) -> float: ...

    @property
    def normalized(self) -> VectorPoint: ...

    def rotate_around(
        self, other: VectorPoint, theta: float, degrees: bool = True
    ) -> VectorPoint: ...


class MultiVectorPoint:
    def __init__(self, xyz: NDArray[float64]): ...

    @classmethod
    def from_lonlats(
        cls, coordinates: NDArray[float64], degrees: bool = True
    ) -> MultiVectorPoint: ...

    @property
    def xyz(self) -> NDArray[float64]: ...

    @property
    def vectors(self) -> list[VectorPoint]: ...

    def to_lonlats(self, degrees: bool = True) -> NDArray[float64]: ...

    @property
    def lengths(self) -> NDArray[float64]: ...

    @property
    def normalized(self) -> MultiVectorPoint: ...

    def rotate_around(
        self, other: MultiVectorPoint, theta: float, degrees: bool = True
    ) -> MultiVectorPoint: ...


class ArcString:
    def __init__(self, a: VectorPoint, b: VectorPoint): ...

    @property
    def a(self) -> VectorPoint: ...

    @property
    def b(self) -> VectorPoint: ...

    @property
    def length(self) -> float: ...

    @property
    def midpoint(self) -> VectorPoint: ...

    def contains(self, point: VectorPoint) -> bool: ...

    def intersects(self, other: ArcString) -> bool: ...

    def intersection(self, other: ArcString) -> VectorPoint: ...

    def interpolate(self, n: int = 50) -> MultiVectorPoint: ...


def angle(
    a: NDArray[float64], b: NDArray[float64], c: NDArray[float64], degrees: bool = True
) -> NDArray[float64]: ...


def angles(
    a: NDArray[float64], b: NDArray[float64], c: NDArray[float64], degrees: bool = True
) -> NDArray[float64]: ...
