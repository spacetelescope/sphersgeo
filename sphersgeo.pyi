from numpy import float64
from numpy.typing import NDArray


def normalize_vectors(xyz: NDArray[float64]) -> NDArray[float64]: ...


class SphericalPoint:
    def __init__(self, xyz: NDArray[float64]): ...

    @property
    def xyz(self) -> NDArray[float64]: ...

    @classmethod
    def from_lonlat(
        cls, lonlat: NDArray[float64], degrees: bool = True
    ) -> SphericalPoint: ...

    def to_lonlat(self, degrees: bool = True) -> NDArray[float64]: ...

    def rotate_around(
        self, other: SphericalPoint, theta: float, degrees: bool = True
    ) -> SphericalPoint: ...


class SphericalPoints:
    def __init__(self, xyz: NDArray[float64]): ...

    @property
    def xyz(self) -> NDArray[float64]: ...

    @property
    def points(self) -> list[SphericalPoint]: ...

    @classmethod
    def from_lonlats(
        cls, lonlats: NDArray[float64], degrees: bool = True
    ) -> SphericalPoints: ...

    def to_lonlats(self, degrees: bool = True) -> NDArray[float64]: ...

    def rotate_around(
        self, other: SphericalPoints, theta: float, degrees: bool = True
    ) -> SphericalPoints: ...


class GreatCircleArc:
    def __init__(self, a: SphericalPoint, b: SphericalPoint): ...

    @property
    def a(self) -> SphericalPoint: ...

    @property
    def b(self) -> SphericalPoint: ...

    @property
    def subtends(self) -> float: ...

    def intersects(self, other: GreatCircleArc) -> bool: ...

    def contains(self, point: SphericalPoint) -> bool: ...

    def intersection(self, other: GreatCircleArc) -> SphericalPoint: ...

    @property
    def midpoint(self) -> SphericalPoint: ...

    def interpolate_points(self, n: int = 50) -> SphericalPoints: ...


class GreatCircleArcs:
    def __init__(self, a: SphericalPoints, b: SphericalPoints): ...

    @property
    def a(self) -> SphericalPoints: ...

    @property
    def b(self) -> SphericalPoints: ...

    @property
    def arcs(self) -> list[GreatCircleArc]: ...

    @property
    def subtends(self) -> NDArray[float64]: ...

    def intersects(self, other: GreatCircleArc) -> bool: ...

    def contains(self, point: SphericalPoints) -> NDArray[bool]: ...

    def intersections(self, other: GreatCircleArc) -> SphericalPoints: ...

    @property
    def midpoints(self) -> SphericalPoints: ...

    def interpolate_points(self, n: int = 50) -> list[SphericalPoints]: ...


def angles(
    a: SphericalPoints, b: SphericalPoints, c: SphericalPoints, degrees: bool = True
) -> NDArray[float64]:
    pass
